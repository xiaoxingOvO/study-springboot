

===================保存用户业务逻辑=================
用户业务
UserService

  void save(User user)

  void delete(Integer id);

  User queryById(Integer id);

  ....


UserServiceImpl implement UserService

  void save(User user){
  	sout("=============");//业务功能-1
  	sout("*************");//业务功能-2
  	...
  	userDao.save(user);
  }

  void delete(Integer id){
	sout("=============");//业务功能-1
	sout("*************");//业务功能-2
	......
  	userDao.delete(id);
  }

   User queryById(Integer id){
   	sout("=============");//业务功能-1
   	sout("*************");//业务功能-2
   	.....
   	return userDao.queryById(id)
   }


=================保存用户业务逻辑==================
加入新的功能:
	保存用户之前: 打印输出一句话  "==========="

================用户业务逻辑======================

加入新的功能:
	保存|删除|修改|查询用户之前: 打印输出一句话  "==========="
	保存|删除|修改|查询用户之前: 打印输出一句话  "***********"
================================================
问题:
	1.现有业务层开发存在问题
		a.-->额外功能代码存在大量冗余?
		b.-->每个方法都需要书写一遍额外功能代码不利于后续项目维护?

Spring 框架
	AOP: Aspect(切面) Oriented(面向) Programmaing  面向切面编程

	Aspect (切面) = Advice(通知) + 切入点(Pointcut)

	Advice 通知: 业务逻辑中一些附加操作称之为通知  前置  后置   环绕
	Pointcut 切入点: 配置通知应用于项目中那些业务操作

	Aspect 切面 =  附加操作(Advice) + 切入点(Pointcut)(配置)

	1.类 implement xxAdvice接口

	2.XML进行配置
	<aop:config>
		<aop:pointcut id="pc" expresssion="execution(* 包.类.方法名(方法参数))|within(类级别)|@annotation(注解类型)">
		<aop:advisor advice-ref="通知类" pointcut-ref="pc"/> 
	</aop:config>



SpringBoot框架 现有spring框架 进一步封装
	
	1.无xml配置 一切皆java配置

	AOP: 面向切面编程

	Aspect 切面 =   Advice(通知)  +  切入点

	1.开发附加操作 Advice

	2.配置切入点&组装切面


面向切面编程步骤
	
	1.引入aop切面编程依赖
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-aop</artifactId>
		</dependency>

	2.在springboot项目中新建config(配置)包


		@Configuration  //修饰范围: 只能用在类上 作用: 代表这是一个spring的配置类  spring.xml
		@Aspect //修饰范围: 只能用在类上   作用:代表这个类是一个切面类  <aop:config>
		MyAspectConfig(自定义切面类)  	配置类{

			//@Before: 代表这个方法是一个前置附加操作
			//@After : 代表这个方法是一个后置附加操作
				注意: 使用@Before 和 @After注解声明方法上加入一个参数 定义一个参数 JointPoint 连接点
			//@Around: 代表这个方法是一个环绕附加操作
				value属性: 用来书写切入点表达式
				注意: 使用@Around注解 在方法定义时声明一个参数: ProceedingJoinPoint 处理过程中连接点

			@Before("execution(* com.baizhi.service.*.*(..))")
			public void before(){
				sout("===========")
			}

		}



=================================================
springboot中文件上传
	
	1.文件上传
	   文件上传: 用户将本地计算机中文件上传到服务器过程称之为文件上传

	2.文件上传开发思路:

		a.提供一张上传页面   提交方式必须:post   enctype属性必须为 multipart/form-data

		b.开发上传controller
		
1.文件下载

	a.确定项目中哪些资源可以被下载  aa.txt 用户须知.doc  .....


	b.将可以被下载资源放入服务器指定位置 、文件上传服务器fastdfs(dfs 分布式文件存储系统 1000个节点 冗余备份 )
								    、上传到OSS对象存储 七牛云。。。。
		/home/download
			aa.txt
			用户须知.doc
			.....
		/Users/chenyn/Desktop/线上课/项目阶段/01springboot/codes/springboot_day6/download

	c.项目中开发一个下载页面download.jsp
		提供下载文件链接

	d.开发下载控制器controller


========================================================
2. 拦截器 interceptor

	filter 过滤器: 过滤可以拦截javaweb中请求,放行,中断  强大: 拦截一切资源 .jsp  html css img .....

  1.定义: 拦截器类似于javaweb中filter 功能
         注意: 只能拦截器controller相关的请求

  2.作用: 将controller中共有代码放入到拦截器中执行,减少controller中代码冗余

  3.拦截器特性:
  		1).拦截器只能拦截controller相关请求
  		2).拦截器可以中断请求轨迹
  		3).请求之前如果该请求配置了拦截器,请求会先经过拦截器,拦截器放心之后执行请求的controller,
  			controller执行完成之后会回到拦截器继续执行拦截器中的代码

  4.拦截器开发

  		a.类 implement HandlerInterceptor 接口 引入默认实现

  			preHandler    预先处理方法:  最先执行方法   返回值布尔类型  true 放行请求  false 中断
  				controller    中内容

  			postHandler   过程中处理: controller返回之后回到postHandler这个方法执行,执行完成这个方法开始响应浏览器

  			afterCompletion 最后完成: 当响应结束之后会执行拦截器中这个方法内容


  		b.配置拦截器

  		   springmvc配置方式:mvc:interceptors  springmvc.xml

  		   springboot 提供了springmvc配置类:    WebMvcConfigurer

  		   类 implement WebMvcConfigurer{

  		   		//覆盖配置拦截器方法
  		   		1.使用哪个拦截器 2.拦截器拦截请求   3.排除那些请求
  		   }


============================================================================
springboot项目两种部署方式:

	1.war 包部署

		a.执行项目打包的方式为 "war"  默认创建springboot项目打包都是jar
		  修改项目pom.xml:
		  <packaging>war<packaging>

		b.去除springboot项目内嵌tomcat依赖
		   <!--tomcat解析jsp-->
	        <dependency>
	            <groupId>org.apache.tomcat.embed</groupId>
	            <artifactId>tomcat-embed-jasper</artifactId>
	            <!--provided当前idea环境可用,打包不参与打包-->
	            <scope>provided</scope>
	        </dependency>

	        <!--去掉内嵌的tomcat依赖-->
	        <dependency>
	            <groupId>org.springframework.boot</groupId>
	            <artifactId>spring-boot-starter-tomcat</artifactId>
	            <scope>provided</scope>
	        </dependency>


	    c.在插件中配置入口类

	    	//1.继承SpringBootServletInitializer
			//2.覆盖configure方法
			public class Application extends SpringBootServletInitializer{
			    public static void main(String[] args) {
			        SpringApplication.run(Application.class,args);
			    }
			    @Override
			    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {
			        return builder.sources(Application.class);
			    }
			}


	2.jar包方式部署

		a.<packaging>jar</packaging>  默认就是jar


		b.在target目录中获取对应jar文件

		c.启动jar包

			java -jar 对应jar文件名字  nohup &

		d.注意事项:
			1.springboot项目在使用jsp模板时,jar包部署默认无法找到jsp页面?
			如何解决:
				<plugins>
				  <!--版本必须为1.4.2版本-->
				  <plugin>
				    <groupId>org.springframework.boot</groupId>
				    <artifactId>spring-boot-maven-plugin</artifactId>
				    <version>1.4.2.RELEASE</version>
				  </plugin>
				</plugins>

			2.指定jsp文件打包位置
				<!--执行jsp文件打包位置-->
		        <resources>
		            <!-- 打包时将jsp文件拷贝到META-INF目录下-->
		            <resource>
		                <!-- 指定resources插件处理哪个目录下的资源文件 -->
		                <directory>src/main/webapp</directory>
		                <!--指定必须要放在此目录下才能被访问到-->
		                <targetPath>META-INF/resources</targetPath>
		                <includes>
		                    <include>**/**</include>
		                </includes>
		            </resource>
		            <resource>
		                <directory>src/main/resources</directory>
		                <includes>
		                    <include>**/**</include>
		                </includes>
		                <filtering>false</filtering>
		            </resource>
		        </resources>

		e.重新打包测试







	




